{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getStateFromPath;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _escapeStringRegexp = _interopRequireDefault(require(\"escape-string-regexp\"));\nvar queryString = _interopRequireWildcard(require(\"query-string\"));\nvar _findFocusedRoute = _interopRequireDefault(require(\"./findFocusedRoute\"));\nvar _validatePathConfig = _interopRequireDefault(require(\"./validatePathConfig\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction getStateFromPath(path, options) {\n  var _ref;\n  if (options) {\n    (0, _validatePathConfig.default)(options);\n  }\n  var initialRoutes = [];\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  var screens = options === null || options === void 0 ? void 0 : options.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n  if (screens === undefined) {\n    var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n      var name = decodeURIComponent(segment);\n      return {\n        name: name\n      };\n    });\n    if (_routes.length) {\n      return createNestedStateObject(path, _routes, initialRoutes);\n    }\n    return undefined;\n  }\n  var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(key, screens, [], initialRoutes, []);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      if (aParts[i] == null) {\n        return 1;\n      }\n      if (bParts[i] == null) {\n        return -1;\n      }\n      var aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      var bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      if (aWildCard) {\n        return 1;\n      }\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n      if (!intersects) {\n        throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n      }\n    }\n    return Object.assign(acc, (0, _defineProperty2.default)({}, config.pattern, config));\n  }, {});\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) !== null && _configs$find !== void 0 && _configs$find.path);\n      });\n    });\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(function (name) {\n        return {\n          name: name\n        };\n      }), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  var result;\n  var current;\n  var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n      return Object.assign({}, c, {\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      });\n    })),\n    routes = _matchAgainstConfigs.routes,\n    remainingPath = _matchAgainstConfigs.remainingPath;\n  if (routes !== undefined) {\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n  var _loop = function _loop() {\n      if (!config.regex) {\n        return 0;\n      }\n      var match = remainingPath.match(config.regex);\n      if (match) {\n        var matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p, i) {\n          return Object.assign(acc, (0, _defineProperty2.default)({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n        }, {});\n        routes = config.routeNames.map(function (name) {\n          var _config$path;\n          var config = configs.find(function (c) {\n            return c.screen === name;\n          });\n          var params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(function (p) {\n            return p.startsWith(':');\n          }).reduce(function (acc, p) {\n            var value = matchedParams[p];\n            if (value) {\n              var _config$parse;\n              var key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n            }\n            return acc;\n          }, {});\n          if (params && Object.keys(params).length) {\n            return {\n              name: name,\n              params: params\n            };\n          }\n          return {\n            name: name\n          };\n        });\n        remainingPath = remainingPath.replace(match[1], '');\n        return 1;\n      }\n    },\n    _config$pattern,\n    _ret;\n  for (var config of configs) {\n    _ret = _loop();\n    if (_ret === 0) continue;\n    if (_ret === 1) break;\n  }\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n  var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var initials = arguments.length > 3 ? arguments[3] : undefined;\n  var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern;\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern2;\n        var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, (0, _toConsumableArray2.default)(parentScreens), (_pattern2 = _pattern) != null ? _pattern2 : parentPattern);\n        configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nvar createConfigItem = function createConfigItem(screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(`^(${pattern.split('/').map(function (it) {\n    if (it.startsWith(':')) {\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    return `${it === '*' ? '.*' : (0, _escapeStringRegexp.default)(it)}\\\\/`;\n  }).join('')})`) : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: (0, _toConsumableArray2.default)(routeNames),\n    parse: parse\n  };\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      var sameParents = true;\n      for (var i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, Object.assign({}, route, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [Object.assign({}, route, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\nvar createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {\n  var state;\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = (0, _findFocusedRoute.default)(state);\n  route.path = path;\n  var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = Object.assign({}, route.params, params);\n  }\n  return state;\n};\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["_escapeStringRegexp","_interopRequireDefault","require","queryString","_interopRequireWildcard","_findFocusedRoute","_validatePathConfig","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","getStateFromPath","path","options","_ref","validatePathConfig","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","apply","_toConsumableArray2","keys","key","createNormalizedConfigs","sort","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","_defineProperty2","match","find","_configs$find","c","screen","result","current","_matchAgainstConfigs","matchAgainstConfigs","regex","RegExp","source","remainingPath","joinPaths","_ref2","_len","arguments","paths","Array","_key","p","_loop","matchedParams","_config$pattern","_config$path","params","value","_config$parse","parse","_ret","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","_pattern2","pop","escape","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","findFocusedRoute","parseQueryParams","parseConfig","query"],"sources":["C:\\Users\\jkvel\\OneDrive\\Documents\\Apps\\sana-mobile\\node_modules\\@react-navigation\\core\\src\\getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}